.. Launch
起動
------
.. Launching a deployment triggers a series of highly orchestrated and controlled events
.. leading to a successful deployment and configuration of an application stack.
配備を起動すると高度に調整され、制御された一連のイベントをトリガします。
成功する配備とアプリケーションスタックの構成につながります。

.. Starting with the deployment configuration shown below. We'll track the launch of the
   deployment from cold start to running.
下記の配備構成で開始します。配備の起動を開始から実行中まで追跡します。

.. We'll track the deployment launch by following the enStratus components throughout the
   event.
配備の起動を以下のenStratusコンポーネントによって我々はイベント全体で追跡します。

.. **enStratus**: State/actions of the enStratus management platform.
**enStratus**: enStratus管理プラットフォームの状態/アクション。

.. **Deployment**: State of the deployment. Values will be LAUNCHING, RUNNING.
**Deployment**: 配備の状態。値は、LAUNCHING(起動中) と、RUNNING(実行中)。

.. **Agent**: State of the agent. Script(s) called. Logs to watch.
**Agent**: エージェントの状態。ログを監視するのに呼ばれるスクリプト。

.. **Service**: State of the service. Script(s) called.
**Service**: サービスの状態。呼ばれるスクリプト。

.. Important:: .. SaaS users may not have access to view some logs and files that are generated.
               SaaSのユーザーは、いくつかのログと生成されるファイルを表示するアクセス許可がない可能性があります。

.. **Logs**: Relevant enStratus logs to watch during this step.
**Logs**: このステップ間の監視すべきenStratus関連ログ。

.. **Files**: Files generated by enStratus.
**Files**: enStratusによって生成されるファイル。

.. Pre-Launch
起動前
^^^^^^^^^^

.. figure:: ./images/Launch0.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Pre-Launch
   :align: center

   Pre-Launch

.. note:: .. CM = Configuration Management. Applied at the level of launch configuration.
          CM =構成管理。起動構成のレベルで適用されます。

.. Launch Initiated/Scale Up
起動開始/スケールアップ
^^^^^^^^^^^^^^^^^^^^^^^^^
.. During deployment launch, enStratus begins the process of provisioning the infrastructure
   needed to support the application architecture.
配備の起動時に、enStratusは、アプリケーションアーキテクチャをサポートするインフラストラクチャの
プロビジョニングプロセスを開始する必要がありました。

.. note:: .. Server launches in an automated "deployment" context are initiated by the
      Scaling worker process, not the dispatcher service as in standalone server launches.
   自動化された "配備"コンテキスト内のサーバー起動はスケーリングのワーカープロセスによって起動され、
   スタンドアロンサーバの起動のようなディスパッチャサービスではありません。

   .. All deployment server launches are "scaling events". The start of a deployment is a
      scale up from 0 to the minimum number of servers, as specified in the tier.
   すべての配備サーバーの起動は"スケーリングイベント"です。配備の始まりは
   層で指定された、0からサーバーの最小数までのスケールアップです。

.. figure:: ./images/Launch1.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Launch Initiated
   :align: center

   Launch Initiated

.. Component Actions
コンポーネントアクション
%%%%%%%%%%%%%%%%%

.. **Overview**
**概要**

.. #. enStratus makes API calls to launch the servers.
.. #. Once the servers are started, the agents will initiate a handshake.
#. enStratus APIはサーバを起動する呼び出しを行います。
#. サーバが起動されると、エージェントは、ハンドシェイクを開始します。

.. **enStratus**: Initiate scaling event, launch VM. Register launch event. Change deployment state to LAUNCHING.
**enStratus**: スケーリングイベントを開始し、VMを起動、起動イベントを登録、配備状態を"LAUNCHING"(起動)に変更します。

.. **Deployment**: LAUNCHING. This is an informative status change.
**配備**: 起動。これはステータスが変化したという情報表示です。

.. **Agent**: STARTING, then RUNNING. 
**エージェント**: "STARTING"(開始中)、次に "RUNNING"(実行中)。

.. **Services**:
**サービス**:

  .. * Application: PAUSED
  .. * Database: PAUSED
  * アプリケーション: 一時停止
  * データベース: 一時停止
  
.. **Logs**: 
**ログ**:

.. #. Worker: scaling will launch the VM via the cloud API. 

..    Log location: /services/worker/log/

..    com.enstratus.automation.worker.ScalingTaskWorker.100.log 

..    where 100 is a customer ID, yours may be different

.. #. Monitor: Server log "discovers" new servers. Deployment log tracks deployment tier
      state. ScalingEvent logs track state of scaling events.

..    Log location: /services/monitor/log/

..    * Server-1.log
      * Deployment-1.log
      * ScalingEvent-1.log
      * ScalingEventProcess-1.log

.. #. Dispatcher service: dispatcher log will register the agent handshake.

.. **Files**: A new scaling worker log will be created if one does not already exist.

#. ワーカー: スケーリングがクラウドAPIを介してVMを起動します。 

   ログの場所： /services/worker/log/

   com.enstratus.automation.worker.ScalingTaskWorker.100.log 

   ここで、100は、顧客IDで、実際とは異なる場合があります

#. モニター: サーバログは、新規のサーバーを"発見"します。配備ログは、配備層の状態をを追跡します。
      ScalingEvent ログはは、 scaling eventsの追跡状態をログに記録します。

   .. Log location: /services/monitor/log/
   ログの場所：  /services/monitor/log/

   * Server-1.log
   * Deployment-1.log
   * ScalingEvent-1.log
   * ScalingEventProcess-1.log

#. ディスパッチャーサービス: ディスパッチャーログは、エージェントのハンドシェイクを登録します。

**ファイル**: 1つもが存在しない場合は、新規のスケーリングワーカーのログが作成されます。

.. note:: .. Expect time from when the launch button is pressed to the generation of a
      scaling event is less than one minute. The expected time of running servers is cloud
      dependent, but should be a few minutes.
   起動ボタンが押されてからスケーリングイベントの生成までの予想時間は1分未満です。実行中のサーバーの
   予想時間はクラウドによりますが、数分でなければなりません。

.. Prepare Configuration Management
構成管理の準備
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. In this step, enStratus prepares each VM for executing the configuration management run by
   passing the necessary credentials/endpoint information to the VM via the enStratus agent.
このステップでは、enStratusはenStratusエージェントを介してVMに必要な 資格/エンドポイント 情報を渡すことで、
各VMが構成管理の実行をする準備をします。

.. note:: .. The actions in this step will only take place if there is a configuration
      management action set in the launch configuration.
   このステップのアクションは起動設定内に構成管理アクションの設定がある場合にのみ行われます。

.. figure:: ./images/Launch2.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Prepare Configuration Management
   :align: center

   Prepare Configuration Management

.. Component Actions
   %%%%%%%%%%%%%%%%%

.. **enStratus**: Get credentials for the configuration management run from Key/credentials
   Management system. Pass them to the VM.

.. **Deployment**: LAUNCHING

.. **Agent**: RUNNING. Script called: 

.. * /enstratus/bin/runConfigurationManagement-CHEF

.. **Services**:

..   * Application: PAUSED
..   * Database: PAUSED

.. **Logs**: 

.. #. Worker Service: Configuration worker. 

..    Log location: /services/worker/log

..    com.enstratus.automation.worker.ConfigurationTaskWorker.100.log

.. **Files**: first-boot.json, validation.pem. These files are passed to the agent script.
コンポーネントアクション
%%%%%%%%%%%%%%%%%

**enStratus**: 構成管理用の資格情報をキー/資格管理システムから入手して VMに渡します。

**配備**: "LAUNCHING"(起動中)

**エージェント**: "RUNNING"(実行中)。スクリプトがコールされます。: 

* /enstratus/bin/runConfigurationManagement-CHEF

**サービス**:

  * アプリケーション: 一時停止
  * データペース: 一時停止

**ログ**: 

#. ワーカーサービス: 構成ワーカー。 

   ログの場所: /services/worker/log

   com.enstratus.automation.worker.ConfigurationTaskWorker.100.log

**ファイル**: first-boot.json, validation.pem. これらのファイルは、エージェントスクリプトに渡されます。

.. Execute Configuration Management
構成管理の実行
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. enStratus executes the agent script /enstratus/bin/runConfigurationManagement-CHEF ( in
   the case of Chef ) which in turn calls chef-client with first-boot.json as an argument.
enStratusは、エージェントスクリプトシェフ /enstratus/bin/runConfigurationManagement-CHEF (シェフの場合)
を実行しますが、これは first-boot.json を引数としてシェフクライアント呼び出しを実行します。

.. note:: .. first-boot.json contains the json for executing the appropriate chef role. For
      example: {"run_list":["role[applicationServer]"]}
   first-boot.json は、適切なシェフの役割を実行するためのJSONを含んでいます。
   たとえば：{"run_list":["role[applicationServer]"]}

.. figure:: ./images/Launch3.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Execute Configuration Management
   :align: center

   Execute Configuration Management

.. Component Actions
   %%%%%%%%%%%%%%%%%

.. **enStratus**: Execute the agent script runConfigurationManagement-CHEF.

.. **Deployment**: LAUNCHING

.. **Agent**: RUNNING. Script called: runConfigurationManagement-CHEF

.. **Services**:

..   * Application: PAUSED
..   * Database: PAUSED

.. **Logs**: 

.. #. Worker Service: Configuration worker. Also, the scaling log will still be helpful to
      track.

..    Log location: /services/worker/log

..    * com.enstratus.automation.worker.ConfigurationTaskWorker.100.log
..    * com.enstratus.automation.worker.ScalingTaskWorker.100.log 

.. #. Agent log.

..    Log location: /enstratus/ws/tomcat/log/

..    * enStratus console. Server actions menu > Logs
..    * catalina.out

.. **Files**: first-boot.json, validation.pem, client.pem (post-registration)
コンポーネントアクション
%%%%%%%%%%%%%%%%%

**enStratus**: エージェントスクリプトrunConfigurationManagement-CHEFを実行します。

**配備**: "LAUNCHING"(起動中)

**エージェント**: "RUNNING"(実行中)。 スクリプトが呼ばれます。: runConfigurationManagement-CHEF

**サービス**:

  * アプリケーション：一時停止
  * データベース：一時停止

**ログ**: 

#. ワーカーサービス: 構成ワーカーです。 また、スケーリングのログは、まだ追跡の参考になります。

   ログの場所: /services/worker/log

   * com.enstratus.automation.worker.ConfigurationTaskWorker.100.log
   * com.enstratus.automation.worker.ScalingTaskWorker.100.log 

#. エージェントログ

   ログの場所: /enstratus/ws/tomcat/log/

   * enStratus コンソールで サーバーアクション menu > Logs
   * catalina.out

**ファイル**: first-boot.json、 validation.pem、 client.pem （登録後）

.. Service Download/Install
サービスのダウンロード/インストール
^^^^^^^^^^^^^^^^^^^^^^^^
.. enStratus downloads the service files from cloud files and installs them to a directory
   called /mnt/services/a####, where a#### is the service ID of the service tied to the tier
enStratusは、クラウドファイルからサービスファイルをダウンロードし、ディレクトリ /mnt/services/a#### に
インストールします。ここで a#### は層に接続されているサービスIDです。

.. This service path is used by enstratus to execute automation events.
このサービスパスはenstratusによって自動化イベントを実行するのに使用されます。

.. All services that are defined for the tier are downloaded to every running VM in the tier.
層に対して定義されているすべてのサービスは、層内のすべての実行中のVMにダウンロードされます。

.. figure:: ./images/Launch4.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Service Download
   :align: center

   Service Download

|

.. figure:: ./images/Launch5.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Service Download
   :align: center

   Service Download

.. Component Actions
   %%%%%%%%%%%%%%%%%

.. **Overview**

.. #. enStratus triggers the service download.
   #. The enStratus agent download the service files.
   #. enStratus executes the agent script called installService, passing the service file.

.. **enStratus**: Triggers the service download event.

.. **Deployment**: LAUNCHING

   **Agent**: RUNNING. Script called: 

..    * /enstratus/bin/installService, once the service is downloaded.

.. **Services**: 

..   * Application: PAUSED
     * Database: STARTING

.. **Logs**: 

.. #. Worker Service: Configuration worker. 
   #. Agent log. In here there will be information about the download of the service.

..    Log location: /enstratus/ws/tomcat/log/ and in the console actions > Logs.
   
..    * enStratus console. Server actions menu > Logs
      * catalina.out

.. **Files**: appService.tar.gz, dbService.tar.gz. 
コンポーネントアクション
%%%%%%%%%%%%%%%%%

**概要**

#. enStratusはサービスのダウンロードをトリガーします。
#. enStratusエージェントは、サービスファイルをダウンロードします。
#. enStratusはサービスファイルを渡してinstallServiceと呼ばれるエージェントのスクリプトを実行します。

**enStratus**: サービス　ダウンロード　イベントをトリガーします。

**配備**: "LAUNCHING"(起動中)

**エージェント**: "RUNNING"(実行中)。 スクリプトが呼ばれました: 

   * /enstratus/bin/installService, 一度サービスがダウンロードされます。

**サービス**: 

  * アプリケーション：一時停止
  * データベース：始動

**ログ**: 

#. ワーカーサービス: 構成ワーカー 
#. エージェントログです。この中にはサービスのダウンロードについての情報が存在します。

   ログの場所: /enstratus/ws/tomcat/log/ そしてコンソールで actions > Logs.
   
   * enStratusコンソール。 サーバーアクション menu > Logs
   * catalina.out

**ファイル**: appService.tar.gz, dbService.tar.gz. 

.. Configure Dependencies
依存関係の設定
^^^^^^^^^^^^^^^^^^^^^^
.. The first part of orchestration, the ordering of deployment events according to the
   service dependency relationships, starts here.
調整の最初の部分で、サービスの依存関係による配備イベントの順序付けは、ここから始まります。

.. The application service depends on the datasource installed as part of the database
   service. This means that enStratus will finish configuration on the database service, up
   to and including the installation of the datasource, before installing and configuring the
   application service.
アプリケーションサービスは、データベースサービスの一部としてインストールされたデータソースに
依存しています。これはenStratusがアプリケーションサービスのインストールと設定の前に、
データソースのインストールを含め、データベースサービス上での構成を完了することを意味します。

.. In this step, the datasource is downloaded from cloudfiles storage and installed on the
   database.
このステップで、データソースは、クラウドファイルストレージからダウンロードされ、データベース上に
インストールされます。

.. figure:: ./images/Launch6.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Configure Dependencies
   :align: center

   Configure Dependencies

.. **Overview**

.. #. Since the datasource installed as part of the database service is the dependency for
      the applicaiton service, it must be configured before any actions can be taken on 
      the application service.
.. #. enStratus initiates the process for downloading the data source.
   #. the enStratus agent downloads the data source file from cloud files storage.
   #. enStratus passes in a configuration file to the database server containing information
      about the dependent application VM.

.. .. important:: This is probably the single most important step to understand in this
     process. 

..   Information that cannot be known by the database server *a priori*, such as IP
     addresses, is/are passed to the DB server so it can run a grant statement to allow for a
     connection from a heretofore non-existent application server(s).

..   enStratus has knowledge of the entire cloud infrastructure and passes your applications,
     databases, and any service this type of information in a file called enstratus.cfg. The
     information passed to each VM is customizable and extensible... **Overview**
**概要**

#. データベースサービスの一部としてインストールされたデータソースはアプリケーションサービスの依存関係であるため、
   それはアプリケーションサービスで、いかなるアクションもとられる前に、設定される必要があります
   。
#. enStratusは、データソースをダウンロードするためのプロセスを開始します。
#. enStratusエージェントは、クラウドのファイルストレージからデータソースファイルをダウンロードします。
#. enStratusは依存アプリケーションVMに関する情報をデータベースサーバに構成ファイルに入れて渡します。

.. important:: これはおそらく、このプロセスの中でこれを理解するための単一の最も重要なステップです。

  データベースサーバによってIPアドレスなどの *先天的* に知ることができない情報がありますが、これを渡すことが
  可能になります。grant ステートメントを実行し、これまで存在しないアプリケーション·サーバー（S）からの接続
  をしてアドレスを、DBサーバに渡すことができます。

  enStratusは、全体のクラウドインフラストラクチャの知識を持っていて、アプリケーション、
  データベースおよびこのサービスタイプの enstratus.cfg と呼ぶファイルのいかなる情報も渡します。
  各VMに渡される情報は、カスタマイズと拡張が可能です。

.. Component Actions
   %%%%%%%%%%%%%%%%%

.. **enStratus**: Initiates the download of the database datasource file to the database VM,
   and passing of configuration files.

.. **Deployment**: LAUNCHING

.. **Agent**: RUNNING. 

.. Scripts called: 

.. #. installDataSource. Responsible for calling the service script:
      enstratus-installDataSource, which loads the data source into the database.
.. #. configureService. Responsible for calling the service script: enstratus-configure,
      which reads the configuration file called enstratus.cfg.
.. #. stopService. Once the configuration is complete, the service is stopped with a call to
      this script, which calls the service script enstratus-stop.
.. #. startService. After the service is stopped, enStratus start the service using the logic
      provided by calling the service script enstratus-start.

.. **Services**:

..   * Application: PAUSED
     * Database: STARTING

.. Scripts called:

.. #. enstratus-installDataSource
.. #. enstratus-configure. Contains logic to dynamically generate configuration files using
      the information passed to it by enStratus. In this case, the my.cnf file for MySQL is
      generated from the template file that was in cfg/master.cnf. This script is passed the
      above mentioned enstratus.cfg file.
.. #. enstratus-stop. Contains logic to stop the MySQL service.
.. #. enstratus-start. Contains logic to start the MySQL service.

.. **Logs**: 

.. #. Worker Service: Configuration worker. Scaling Worker.

..    Log location: /services/worker/log

..    * com.enstratus.automation.worker.ConfigurationTaskWorker.100.log
      * com.enstratus.automation.worker.ScalingTaskWorker.100.log 

.. #. Agent log. In here there will be information about the download of the datasource and
      the subsequent configuration.

..    Log location: /enstratus/ws/tomcat/log/ and in the console actions > Logs.

..    * enStratus console. Server actions menu > Logs
      * catalina.out

.. **Files**: datasource.sql, enstratus.cfg. These files are passed to the database instance.

コンポーネントアクション
%%%%%%%%%%%%%%%%%

**enStratus**: データベースのデータソースファイルをデータベースVMにファイルのダウンロードを開始し、
構成ファイル渡します。

**配備**: "LAUNCHING"(起動中)

**エージェント**: "RUNNING"(実行中) 

呼ばれるスクリプト: 

#. installDataSource. サービススクリプトを呼び出すための責任：
   データベースにデータソースをロードし、enstratusにする-installDataSource。
#. configureService. サービススクリプトを呼び出すための責任を負い：enstratus-configureを、
   これはenstratus.cfgと呼ばれる設定ファイルを読み込みます。
#. stopService. サービススクリプトを呼び出すための責任を負い：enstratus-configureを、
   これはenstratus.cfgと呼ばれる設定ファイルを読み込みます。
#. startService. サービスが停止された後、enStratusは、ロジックを使用してサービスを開始
   サービススクリプトenstratusスタート呼び出しによって提供されます。

**サービス**:

  * アプリケーション：一時停止
  * アプリケーション：一時停止

呼ばれるスクリプト:

#. enstratus-installDataSource
#. enstratus-configure. 構成します。動的に使用してコンフィギュレーションファイルを生成するロジックが含まれています
   情報がenStratusによってそれに渡されます。この場合、MySQLのmy.cnfファイルは
   CFG/ master.cnfにあったテンプレートファイルから生成されます。このスクリプトが渡されます。
   上記enstratus.cfgファイルに言及した。
#. enstratus-stop. MySQLサービスを停止するロジックが含まれています。
#. enstratus-start. MySQLサービスを停止するロジックが含まれています。

**ログ**: 

#. ワーカーサービス: 構成ワーカー。スケーリングワーカー

   ログの場所: /services/worker/log

   * com.enstratus.automation.worker.ConfigurationTaskWorker.100.log
   * com.enstratus.automation.worker.ScalingTaskWorker.100.log 

#. エージェントログに記録されます。ここでデータソースのダウンロードに関する情報があります。
   以降の設定。

   ログの場所: /enstratus/ws/tomcat/log/ とコンソールで actions > Logs.

   * enStratus console. サーバーアクション menu > Logs
   * catalina.out

**ファイル**: datasource.sql, enstratus.cfg. これらのファイルは、データベース·インスタンスに渡されます。

.. Configure Dependent Services
依存サービスの設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. Now that the database service is configured, the application service dependency is
   satisified and the application service can be configured.
データベースサービスが設定されましたので、アプリケーションサービスの依存関係は、
満足され、アプリケーションサービスを構成することができます。


.. enStratus passes a configuration file called enstratus.cfg to the application service
   which contains information for the application to dynamically configure the application
   configuration files to connect to the database.
enStratusは、アプリケーションサービスにenstratus.cfgと呼ばれる構成ファイルを渡します。
これには、データベースに接続してアプリケーションが動的にアプリケーションを構成する情報が含まれています。

.. Once the application service is deployed and configured, the load balancer is notified of
   a new server joining the load-balanced pool. enStratus passes information to the load
   balancer so it can take the actions necessary to join the node.
アプリケーショ·サービスが配備され、構成されると、ロード·バランサに新規サーバーが負荷分散プールに
参加したことを通知されます。enStratusはロードバランサがノードへの参加に必要なアクションを
取ることができるための情報を渡します。

.. figure:: ./images/Launch7.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Configure Dependent Service(s)
   :align: center

   Configure Dependent Service(s)

.. Component Actions
   %%%%%%%%%%%%%%%%%

.. **enStratus**: Dependency satisified. Configure application service. Grant database access
   to application servers.

.. **Deployment**: LAUNCHING

.. **Agent**: RUNNING. 

.. Scripts called: 

.. #. configureService. Responsible for calling the service script: enstratus-configure,
      which reads the configuration file called enstratus.cfg.
.. #. stopService. Once the configuration is complete, the service is stopped with a call to
      this script, which calls the service script enstratus-stop
.. #. startService. After the service is stopped, enStratus start the service using the logic
      provided by calling the service script enstratus-start.
.. #. startProxy (Load Balancer, if VM) enStratus passes information about each load-balanced
      node to the load balancer.
.. #. grantDatabaseAccess. Called on the database server with information about the
      application servers to which access should be granted.

.. **Services**: 

..   * Application: STARTING
     * Database: RUNNING

.. Scripts called:

.. #. enstratus-configure. Contains logic to dynamically generate configuration files using
      the information passed to it by enStratus. In this case, the application configuration
      files are generated from the template files in cfg/.
.. #. enstratus-stop. Contains logic to stop the application service.
   #. enstratus-start. Contains logic to start the application service.
   #. enstratus-grantDatabaseAccess. Called on the database server.

.. **Logs**: 

.. #. Worker Service: Configuration worker. 

..    Log location: /services/worker/log

..    com.enstratus.automation.worker.ConfigurationTaskWorker.100.log

.. #. Agent log. Contains information about the configuration of the application service and
      the addition of a load-balanced node.

..    Log location: /enstratus/ws/tomcat/log/ and in the console actions > Logs.

..    * enStratus console. Server actions menu > Logs
      * catalina.out

.. **Files**: enstratus.cfg, passed to the application vm.

コンポーネントアクション
%%%%%%%%%%%%%%%%%

**enStratus**: 満足それた依存関係。アプリケーション·サービスを構成します。データベースの
アプリケーションサーバーへのアクセスを許可します。

**配備**: "LAUNCHING"(起動中)

**エージェント**: "RUNNING"(実行中)。 

呼ばれるスクリプト: 

#. configureService. サービススクリプト enstratus-configure を呼び出すための責任を負います。
   これは enstratus.cfg と呼ばれる設定ファイルを読み込みます。
#. stopService. 設定が完了すると、サービスは サービススクリプト enstratus-stop を呼び出す、
   このスクリプトを呼び出すことでことでサービスを停止しします。
#. startService. 設定が完了すると、サービスは サービススクリプト enstratus-start を呼出すことで
   提供されるロジックを使用してenStratusはサービスを開始します。
#. startProxy （VMであれば、ロードバランサ）enStratusは、ロードバランサに各々の負荷が均等化された
   ノードに関する情報を渡します。
#. grantDatabaseAccess. データベースサーバー上でアプリケーションサーバーに関する、どのアクセスが許可
   されるべきであるかの情報を持って呼び出されます。

**サービス**: 

  * アプリケーション：始動
  * データベース：実行

呼ばれるスクリプト:

#. enstratus-configure. enStratusから渡された情報を使用して動的に構成ファイルを生成する
   ロジックが含まれています。この場合、アプリケーションの構成ファイルは、cfg/内の
   テンプレートファイルから生成されます。
#. enstratus-stop. アプリケーションサービスを停止するロジックが含まれています。
#. enstratus-start. アプリケーションサービスを開始するロジックが含まれています。
#. enstratus-grantDatabaseAccess. データベース·サーバー上で呼び出されます。

**ログ**: 

#. ワーカーサービス: 構成ワーカーです。

   ログの場所: /services/worker/log

   com.enstratus.automation.worker.ConfigurationTaskWorker.100.log

#. エージェントログ。アプリケーションサービスの構成に関する情報と負荷分散されたノードの追加情報が含まれています。

   ログの場所: /enstratus/ws/tomcat/log/ コンソール actions > Logs.

   * enStratusコンソール。サーバーアクション menu > Logs
   * catalina.out

**ファイル**: enstratus.cfg, passed to the application vm.

.. Start Proxy
^^^^^^^^^^^
.. In the final step of this deployment launch, the newly provisioned application server
   nodes are joined to the load balancing VM.

.. **enStratus**: Call startProxy on the load balancing VM with information about the
   application nodes.

.. **Deployment**: RUNNING. After this step, the deployment will switch to a RUNNING state.

.. **Agent**: RUNNING. Script called: /enstratus/bin/startProxy, with arguments necessary to
   add the application node to the load balancer software.

.. **Services**:

  * Application: RUNNING
  * Database: RUNNING

.. **Logs**: 

.. #. Agent log on the load balancing VM.

..    Log location: /enstratus/ws/tomcat/log/ and in the console actions > Logs.

..    * enStratus console. Server actions menu > Logs
      * catalina.out

.. figure:: ./images/Launch8.png
   :height: 900px
   :width: 1000 px
   :scale: 50 %
   :alt: Configure Load Balancing
   :align: center

   Configure Load Balancing
プロキシの起動
^^^^^^^^^^^
この配備の起動の最後のステップでは、新規にプロビジョニングされたアプリケーションサーバーノードが、
ロード·バランシングVMに結合されています。

**enStratus**: ロードバランシングVM上でアプリケーションノード関する情報を持って startProxy をコールします。

**配備**: "RUNNING"(実行中)。このステップの後、配備がRUNNING状態に切り替わります。

**エージェント**: "RUNNING"(実行中)。 呼ばれたスクリプト：ロードバランサソフトウェアに
アプリケーションノードを追加するのに必要な引数を指定して /enstratus/bin/startProxy をコールします。

**サービス**:

  * アプリケーション：実行
  * データベース：実行

**ログ**: 

#. ロード·バランシングVM上のエージェントログ。

   ログの位置: /enstratus/ws/tomcat/log/ そして、コンソール actions > Logs.

   * enStratusコンソール。サーバーアクション menu > Logs
   * catalina.out

